---
import { fn, Op } from 'sequelize';

import containerStyles from '../components/Container.module.css';
import inputStyles from '../components/Input/Input.module.css';

import Layout from '../layouts/Layout.astro';
import Header from '../components/Header/Header.astro';

import CTypeOverview from '../components/CTypeOverview/CTypeOverview.astro';
import { paginate } from '../utilities/paginate';
import { NotFoundResponse } from '../utilities/NotFoundResponse';

const query = Astro.url.searchParams.get('query');
const where = !query
  ? undefined
  : { search: { [Op.match]: fn('to_tsquery', query) } };

const {
  data,
  currentPage,
  url: { prev, next },
} = await paginate(Astro.url, where);

if (data.length === 0) {
  return new NotFoundResponse();
}
---

<Layout>
  <Header />

  <search>
    <form action="/" method="get" class={containerStyles.container}>
      <input
        type="search"
        name="query"
        value={query}
        placeholder="Search query"
        aria-label="Search query"
        autofocus={!!query}
        class={inputStyles.search}
      /><button type="submit">Search</button>
    </form>

    <ul>
      {data.map(({ dataValues }) => <CTypeOverview cTypeData={dataValues} />)}
    </ul>

    {
      (prev || next) && (
        <nav>
          {next && (
            <a class="newer" href={next}>
              Newer
            </a>
          )}
          {next && <p>Page {currentPage}</p>}
          {prev && (
            <a class="older" href={prev}>
              Older
            </a>
          )}
        </nav>
      )
    }
  </search>
</Layout>

<style>
  search {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    padding-block: 1rem;
  }

  button {
    box-sizing: border-box;
    block-size: 2.25rem;
    border: var(--color-border);
    border-radius: var(--border-radius);
    border-start-start-radius: 0;
    border-end-start-radius: 0;
    background: var(--color-link);
    padding-inline: 0.75rem;
    color: white;
  }

  ul {
    width: 100%;
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  nav {
    display: grid;
    grid-template-columns: 1fr 6rem 1fr;
    gap: 1rem;
    align-items: center;
    margin-block: 1rem;
  }

  p {
    color: var(--color-text-primary);
    grid-column: 2;
    text-align: center;
    margin: 0;
  }

  a {
    text-align: center;
    color: var(--color-link);
  }

  .newer {
    grid-column: 1;
  }

  .older {
    grid-column: 3;
  }
</style>
