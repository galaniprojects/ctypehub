---
import { fn, Op } from 'sequelize';

import containerStyles from '../components/Container.module.css';

import Layout from '../layouts/Layout.astro';

import CTypeOverview from '../components/CTypeOverview/CTypeOverview.astro';
import PageNav from '../components/PageNav/PageNav.astro';
import SearchForm from '../components/SearchForm/SearchForm.astro';
import { paginate } from '../utilities/paginate';
import { Tag } from '../models/tag';
import { generatePath, paths } from '../paths';

const query = Astro.url.searchParams.get('query');

const tagResults = await Tag.findAll({
  where: {
    search: {
      [Op.match]: fn('websearch_to_tsquery', 'english', query),
    },
  },
  attributes: ['tagName'],
  group: ['tagName'],
});

const where = {
  block: { [Op.ne]: null },
  isHidden: false,
  ...(query && {
    search: { [Op.match]: fn('websearch_to_tsquery', 'english', query) },
  }),
};

const include = 'tags';

const {
  data: cTypeResults,
  currentPage,
  url: { prev, next },
} = await paginate(Astro.url, where, include);
---

<Layout
  description="CType Hub: The attester’s toolkit for KILT credentials. Discover and create new claim types and help shape the world of decentralized identity."
>
  <search>
    <SearchForm action={paths.home} query={query} heading="CType Hub" />

    {
      tagResults.length > 0 && (
        <Fragment>
          <p>Tag results for “#{query}”:</p>

          <ul class="tagResults">
            {tagResults.map(({ dataValues: { tagName } }) => (
              <li>
                <a
                  class={containerStyles.container}
                  href={generatePath(paths.tag, tagName)}
                >
                  #{tagName}
                </a>
              </li>
            ))}
          </ul>
        </Fragment>
      )
    }

    {
      query && cTypeResults.length === 0 && (
        <p>No CType results for “{query}”</p>
      )
    }
    {
      cTypeResults.length > 0 && (
        <Fragment>
          {query && <p>CType results for “{query}”:</p>}
          <ul>
            {cTypeResults.map(({ dataValues }) => (
              <CTypeOverview cTypeData={dataValues} />
            ))}
          </ul>
        </Fragment>
      )
    }

    <PageNav prev={prev} next={next} currentPage={currentPage} />
  </search>
</Layout>

<style>
  p {
    color: var(--color-text-primary);
    text-align: center;
  }

  ul {
    inline-size: 100%;
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .tagResults {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    justify-content: center;
    margin-block-end: 1rem;
  }

  a {
    display: inline-block;
    padding: 0.5rem;
    overflow-wrap: anywhere;
    text-align: center;
    color: var(--color-link);
    font-size: 1rem;
    text-decoration: none;
  }

  a:active {
    background: var(--color-background-active);
  }

  @media screen and (width >= 1000px) {
    a:active {
      background: var(--color-background-secondary);
    }

    a:focus,
    a:hover {
      text-decoration: underline;
    }
  }
</style>
