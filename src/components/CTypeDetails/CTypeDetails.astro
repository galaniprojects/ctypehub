---
import type { CTypeData } from '../../models/ctype';

import { CType, ConfigService, Did, DidUri } from '@kiltprotocol/sdk-js';

import containerStyles from '../Container.module.css';
import propertyStyles from './Property.module.css';

import { configuration } from '../../utilities/configuration';

import { generatePath, paths } from '../../paths';

import { Property } from './Property';

async function getWeb3NameForDid(did: DidUri): Promise<string | undefined> {
  const api = ConfigService.get('api');
  const didChain = await api.call.did.query(Did.toChain(did));
  if (didChain.isNone) {
    return;
  }
  const { web3Name } = Did.linkedInfoFromChain(didChain);
  return web3Name;
}

interface Props {
  cTypeData: CTypeData;
}

const {
  title,
  creator,
  properties,
  createdAt,
  description,
  extrinsicHash,
  schema,
  attestationsCount,
  tags,
} = Astro.props.cTypeData;

const tagNames = tags?.map(({ dataValues }) => dataValues.tagName);

const web3Name = await getWeb3NameForDid(creator);

const schemaV1 = CType.fromProperties('', {}).$schema;
const version = schema === schemaV1 ? 'V1' : 'draft-01';
const kiltCType = CType.fromProperties(title, properties, version);

const { subscan } = configuration;
---

<section class={containerStyles.container}>
  <h1 class="title">{title}</h1>

  <dl>
    {
      description && (
        <Fragment>
          <dt class={propertyStyles.term}>Description:</dt>
          <dd class={propertyStyles.definition}>{description}</dd>
        </Fragment>
      )
    }

    <dt class={propertyStyles.term}>Creator:</dt>
    <dd class={propertyStyles.definition}>
      {
        web3Name ? (
          <a class={propertyStyles.anchor} href={`https://w3n.id/${web3Name}`}>
            w3n:{web3Name}
          </a>
        ) : (
          creator
        )
      }
    </dd>

    <dt class={propertyStyles.term}>Number of Attestations:</dt>
    <dd class={propertyStyles.definition}>{attestationsCount}</dd>

    {
      Object.entries(properties).map(([name, value], index) => (
        <Fragment>
          <dt
            class={propertyStyles.term}
            id={`/properties/${name}`}
          >{`Property ${index + 1}:`}</dt>
          <dd class={propertyStyles.definition}>
            {name}
            <dl class="indent">
              <Property value={value} />
            </dl>
          </dd>
        </Fragment>
      ))
    }

    <dt class={propertyStyles.term}>Creation date:</dt>
    <dd class={propertyStyles.definition}>
      {createdAt.toLocaleString()}
    </dd>

    {
      tagNames && tagNames.length > 0 && (
        <Fragment>
          <dt class={propertyStyles.term}>Tags</dt>
          <dd class={propertyStyles.definition}>
            <ul>
              {tagNames.map((tagName) => (
                <li>
                  <a
                    href={generatePath(paths.tag, tagName)}
                    class={propertyStyles.anchor}
                  >
                    #{tagName}
                  </a>
                </li>
              ))}
            </ul>
          </dd>
        </Fragment>
      )
    }

    <dt class={propertyStyles.term}>Extrinsic:</dt>
    <dd class={propertyStyles.definition}>
      <a
        class={propertyStyles.anchor}
        href={`https://${subscan.network}.subscan.io/extrinsic/${extrinsicHash}`}
      >
        {extrinsicHash}
      </a>
    </dd>

    <dt class={propertyStyles.term}>
      <a class="showDetails" href="#details">Technical Details:</a>
    </dt>

    <dd class={propertyStyles.definition} id="details">
      <pre>{JSON.stringify(kiltCType, null, 2)}</pre>
    </dd>
  </dl>
</section>

<style>
  pre {
    margin: 0;
  }

  h1 {
    font-size: 1.375rem;
    margin: 0;
    color: var(--color-text-primary);
    overflow-wrap: break-word;
  }

  .indent {
    margin-block-start: 0.5rem;
    margin-inline-start: 1.25rem;
  }

  .showDetails {
    background: url('chevron-down.svg') no-repeat right;
    font-family: inherit;
    color: inherit;
    text-decoration: none;
    padding-inline-end: 1.5rem;
  }

  #details {
    display: none;
  }

  #details:target {
    display: block;
    color: #b0d5fb;
    background: rgba(var(--color-black-rgb) / 60%);
    border: 1px solid rgba(147 222 141 / 30%);
    overflow: auto;
    font-size: 0.75rem;
    padding: 0.75rem;
    margin-block-start: 0.5rem;
  }

  ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  li {
    display: inline;
    margin-inline-end: 0.25rem;
  }
</style>
