---
import type { CTypeData } from '../../models/ctype';

import {
  CType,
  ConfigService,
  Did,
  DidUri,
  ICType,
} from '@kiltprotocol/sdk-js';

import Container from '../Container.module.css';

import { generatePath, paths } from '../../paths';
import { configuration } from '../../utilities/configuration';

function isKiltCTypeRef(ref: string): ref is ICType['$id'] {
  const regex = /^kilt:ctype:0x([a-fA-F0-9]+)$/;
  return regex.test(ref);
}

function isKiltCTypePropertyRef(
  ref: string,
): ref is `${ICType['$id']}#/properties/${string}` {
  const regex = /^kilt:ctype:0x([a-fA-F0-9]+)#\/properties\/.+$/;
  return regex.test(ref);
}

function $refToHref($ref: string) {
  if (isKiltCTypeRef($ref)) {
    return generatePath(paths.ctypeDetails, $ref);
  }
  if (isKiltCTypePropertyRef($ref)) {
    const inPagePath = $ref.replace('/properties/', '');
    return generatePath(paths.ctypeDetails, inPagePath);
  }
  return $ref;
}

async function getWeb3NameForDid(did: DidUri): Promise<string | undefined> {
  const api = ConfigService.get('api');
  const didChain = await api.call.did.query(Did.toChain(creator));
  if (didChain.isNone) {
    return;
  }
  const { web3Name } = Did.linkedInfoFromChain(didChain);
  return web3Name;
}

interface Props {
  cTypeData: CTypeData;
}

const { title, creator, properties, createdAt, description, extrinsicHash } =
  Astro.props.cTypeData;

const web3Name = await getWeb3NameForDid(creator);

const kiltCType = CType.fromProperties(title, properties);

const { subscan } = configuration;
---

<section class={Container.container}>
  <h1 class="title">{title}</h1>

  <dl>
    <dt class="key">Creator:</dt>
    <dd class="value">
      {
        web3Name ? (
          <a href={`https://w3n.id/${web3Name}`}>w3n:{web3Name}</a>
        ) : (
          creator
        )
      }
    </dd>

    {
      description && (
        <Fragment>
          <dt class="key">Description:</dt>
          <dd class="value">{description}</dd>
        </Fragment>
      )
    }

    {
      Object.entries(properties).map(([name, { type, $ref }], index) => (
        <Fragment>
          <dt class="key" id={name}>{`Property ${index + 1}:`}</dt>
          <dd class="value">
            {$ref ? <a href={$refToHref($ref)}>{name}</a> : name}
          </dd>

          {type && (
            <div class="indent">
              <dt class="key">Type:</dt>
              <dd class="value">{type}</dd>
            </div>
          )}
        </Fragment>
      ))
    }

    <dt class="key">Creation date:</dt>
    <dd class="value">
      {createdAt.toLocaleString()}
    </dd>

    <dt class="key">Extrinsic:</dt>
    <dd class="value">
      <a
        href={`https://${subscan.network}.subscan.io/extrinsic/${extrinsicHash}`}
      >
        {extrinsicHash}
      </a>
    </dd>

    <dt class="key">
      Technical Details: <button class="toggleDetails"></button>
    </dt>
    <dd class="value technicalDetails hidden">
      <pre>{JSON.stringify(kiltCType, null, 2)}</pre>
    </dd>
  </dl>
</section>

<script>
  const technicalDetails = document.querySelector(
    '.technicalDetails',
  ) as HTMLElement;

  const toggleDetails = document.querySelector(
    '.toggleDetails',
  ) as HTMLButtonElement;

  toggleDetails.addEventListener('click', () => {
    technicalDetails.classList.toggle('hidden');
    toggleDetails.classList.toggle('hide');

    if (!technicalDetails.classList.contains('hidden')) {
      technicalDetails.scrollIntoView({ behavior: 'smooth' });
    }
  });
</script>

<style>
  h1,
  dt,
  dd {
    overflow-wrap: break-word;
  }

  a {
    color: var(--color-link);
  }

  pre {
    margin: 0;
  }

  .title {
    font-size: 1.375rem;
    margin: 0;
    color: var(--color-text-primary);
  }

  .key {
    font-family: 'Lato Bold', sans-serif;
    color: #ce9000;
    margin-block-end: 0.25rem;
  }

  .value {
    margin-inline: 0;
    margin-block-end: 0.5rem;
    color: var(--color-text-primary);
  }

  .indent {
    margin-inline-start: 1.25rem;
  }

  .toggleDetails {
    display: inline-flex;
    background: url('chevron-down.svg') no-repeat center;
    border: none;
    height: 1rem;
    width: 1rem;
    cursor: pointer;
    padding-inline: 1rem;
  }

  .hide {
    background: url('chevron-up.svg') no-repeat center;
  }

  .technicalDetails {
    color: #b0d5fb;
    background: rgba(var(--color-black-rgb) / 60%);
    border: 1px solid rgba(147 222 141 / 30%);
    overflow: auto;
    font-size: 0.75rem;
    padding: 0.75rem;
  }

  .hidden {
    display: none;
  }
</style>
